// ===============================================================
// ЁЯкР Daily Bengali Vedic Horoscope API
// Works perfectly on Vercel (Next.js App Router)
// Dynamic by design, supports IP-based geo lookup
// ===============================================================

export const dynamic = "force-dynamic"; // тЬЕ Required for dynamic headers / IP

import { DateTime } from "luxon";
import * as Astronomy from "astronomy-engine";

// ЁЯЧ║я╕П IP тЖТ Geo Lookup
async function fetchGeo(ip) {
  try {
    const res = await fetch(`https://ipapi.co/${ip}/json/`, { cache: "no-store" });
    if (!res.ok) throw new Error("Geo lookup failed");
    return await res.json();
  } catch {
    return null;
  }
}

// ЁЯО▓ Deterministic pseudo-random generator
function seededRandom(seedStr) {
  let h = 2166136261 >>> 0;
  for (let i = 0; i < seedStr.length; i++) {
    h = Math.imul(h ^ seedStr.charCodeAt(i), 16777619) >>> 0;
  }
  return function () {
    h += 0x6D2B79F5;
    let t = Math.imul(h ^ (h >>> 15), 1 | h);
    t = t + Math.imul(t ^ (t >>> 7), 61 | t) ^ t;
    return ((t ^ (t >>> 14)) >>> 0) / 4294967296;
  };
}

// тЩИ Zodiac Signs
const SIGNS = [
  "ржорзЗрж╖", "ржмрзГрж╖", "ржорж┐ржерзБржи", "ржХрж░рзНржХржЯ", "рж╕рж┐ржВрж╣", "ржХржирзНржпрж╛",
  "рждрзБрж▓рж╛", "ржмрзГрж╢рзНржЪрж┐ржХ", "ржзржирзБ", "ржоржХрж░", "ржХрзБржорзНржн", "ржорзАржи"
];

// ЁЯМЯ Horoscope Text Templates
const TEMPLATES = {
  lead: [
    "ржЖржЬ ржЖржкржирж╛рж░ рж╕рзГржЬржирж╢рзАрж▓ рж╢ржХрзНрждрж┐ ржЬрж╛ржЧрзНрж░ржд рж╣ржмрзЗред ржирждрзБржи ржХрж╛ржЬрзЗрж░ рж╕рзБржпрзЛржЧ ржЖрж╕ржмрзЗред",
    "ржЖржЬ ржзрзИрж░рзНржп ржУ ржмрж┐ржЪржХрзНрж╖ржгрждрж╛ ржХрж╛ржЬрзЗ ржжрзЗржмрзЗтАФржПржХржЯрзБ рж╕рж╛ржмржзрж╛ржи ржерж╛ржХрзБржиред",
    "ржЖржЬ ржЖржкржирж╛рж░ ржоржи ржХрж░рзНржорзЗ ржПржХрж╛ржЧрзНрж░ ржерж╛ржХржмрзЗ; ржирждрзБржи рж╕рж┐ржжрзНржзрж╛ржирзНрждрзЗ рж╕рж╛ржлрж▓рзНржп ржорж┐рж▓ржмрзЗред",
    "ржЖржЬ ржпрзЛржЧрж╛ржпрзЛржЧ ржмрзГржжрзНржзрж┐ ржкрж╛ржмрзЗтАФржорж┐ржерж╕рзНржХрзНрж░рж┐ржпрж╝рж╛ ржлрж▓ржжрж╛ржпрж╝ржХ рж╣ржмрзЗред",
    "ржЖржЬ ржЖрждрзНржоржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржУ рж╢рзГржЩрзНржЦрж▓рж╛ ржмрж┐рж╢рзЗрж╖ ржлрж▓ ржжрзЗржмрзЗред",
  ],
  health: [
    "ржЧрж▓рж╛ ржмрж╛ рж╣ржЬржорзЗ рж╣рж╛рж▓ржХрж╛ рж╕ржорж╕рзНржпрж╛ рж╣рждрзЗ ржкрж╛рж░рзЗтАФрж╣рж╛рж▓ржХрж╛ ржЦрж╛ржмрж╛рж░ ржЦрж╛ржиред",
    "ржЪрзЛржЦ ржУ ржорж╛ржерж╛ржпрж╝ ржХрзНрж▓рж╛ржирзНрждрж┐ ржПржбрж╝рж╛рждрзЗ ржмрж┐рж╢рзНрж░рж╛ржо ржирж┐ржиред",
    "рж╣рж╛рж▓ржХрж╛ ржмрзНржпрж╛ржпрж╝рж╛ржо ржмрж╛ рж╣рж╛ржБржЯрж╛ рж╕рзНржмрж╛рж╕рзНржерзНржп ржнрж╛рж▓рзЛ рж░рж╛ржЦржмрзЗред",
    "ржмрж┐рж╢рзНрж░рж╛ржо ржУ ржкрж░рзНржпрж╛ржкрзНржд ржкрж╛ржирж┐ ржЧрзНрж░рж╣ржг рж░рж╛ржЦрзБржиред",
  ],
  advice: [
    "ржЕржкрзНрж░ржпрж╝рзЛржЬржирзАржпрж╝ ржЦрж░ржЪ ржПржбрж╝рж╛ржиред",
    "ржкрж░рж┐ржмрж╛рж░рзЗрж░ рж╕ржЩрзНржЧрзЗ рж╕ржоржпрж╝ ржХрж╛ржЯрж╛ржиред",
    "ржирждрзБржи ржкрж░рж┐ржХрж▓рзНржкржирж╛ рж▓рж┐ржЦрзЗ рж░рж╛ржЦрзБржиред",
    "ржзрзНржпрж╛ржи ржУ ржЧржнрзАрж░ рж╢рзНржмрж╛рж╕ ржоржи рж╢рж╛ржирзНржд ржХрж░ржмрзЗред",
  ],
};

// ЁЯМа Nakshatra Flavor Texts
const NAK_FLAVOR = {
  "ржЕрж╢рзНржмрж┐ржирзА": "рж╢рзБрж░рзБ ржХрж░рж╛рж░ рж╢ржХрзНрждрж┐ ржУ ржЙржжрзНржпржо ржмрзГржжрзНржзрж┐ ржкрж╛ржмрзЗред",
  "ржнрж░ржгрзА": "рж╕рзГржЬржирж╢рзАрж▓рждрж╛ ржУ рж╕рж╣ржорж░рзНржорж┐рждрж╛ ржЬрж╛ржЧрзНрж░ржд рж╣ржмрзЗред",
  "ржХрзГрждрзНрждрж┐ржХрж╛": "ржкрж░рж┐рж╢рзНрж░ржорзЗрж░ ржлрж▓ ржорж┐рж▓ржмрзЗред",
  "рж░рзЛрж╣рж┐ржгрзА": "ржкрж╛рж░рж┐ржмрж╛рж░рж┐ржХ рж╕ржорзНржкрж░рзНржХ ржоржЬржмрзБржд рж╣ржмрзЗред",
  "ржорзГржЧрж╢рж┐рж░рж╛": "ржирждрзБржи ржЪрж┐ржирзНрждрж╛ ржУ ржХрзМрждрзВрж╣рж▓ ржмрзГржжрзНржзрж┐ ржкрж╛ржмрзЗред",
  "ржЖрж░рзНржжрзНрж░рж╛": "ржЖржмрзЗржЧ ржирж┐ржпрж╝ржирзНрждрзНрж░ржгрзЗ рж░рж╛ржЦрзБржиред",
  "ржкрзБржирж░рзНржмрж╕рзБ": "ржирждрзБржи рж╕рзВржЪржирж╛рж░ ржЬржирзНржп рж╢рзБржн ржжрж┐ржиред",
  "ржкрзБрж╖рзНржпрж╛": "рж╕рж╣ржпрзЛржЧрж┐рждрж╛ ржУ рж╕ржлрж▓рждрж╛ ржорж┐рж▓ржмрзЗред",
  "ржЕрж╢рзНрж▓рзЗрж╖рж╛": "рж╕ржорзНржкрж░рзНржХрзЗ рж╕рждрж░рзНржХ ржерж╛ржХрзБржиред",
  "ржоржШрж╛": "рж╕ржорзНржорж╛ржи ржУ рж╕рзНржмрзАржХрзГрждрж┐ ржкрж╛ржУржпрж╝рж╛рж░ рж╕ржорзНржнрж╛ржмржирж╛ред",
};

// ЁЯОп Utility
function pick(rng, arr) {
  return arr[Math.floor(rng() * arr.length)];
}

// ===============================================================
// ЁЯЪА Main Horoscope Route
// ===============================================================
export async function GET(request) {
  try {
    // ЁЯФН Client IP
    const forwarded = request.headers.get("x-forwarded-for");
    const clientIp = forwarded ? forwarded.split(",")[0].trim() : "8.8.8.8";

    // ЁЯМН Geo lookup
    const geo = await fetchGeo(clientIp);
    const lat = geo?.latitude ?? 22.5726;
    const lon = geo?.longitude ?? 88.3639;
    const city = geo?.city ?? "Kolkata";
    const region = geo?.region ?? "West Bengal";
    const country = geo?.country_name ?? "India";
    const tz = geo?.timezone ?? "Asia/Kolkata";

    // ЁЯХТ Local DateTime
    const now = DateTime.now().setZone(tz);
    const isoDate = now.toISODate();
    const displayDate = now.toFormat("cccc, dd LLLL yyyy", { locale: "bn" });

    // тШАя╕ПЁЯМЩ Astronomy Calculations
    const sunLon = Astronomy.EclipticLongitude("Sun", now.toJSDate());
    const moonLon = Astronomy.EclipticLongitude("Moon", now.toJSDate());

    // рждрж┐ржерж┐ (Tithi) Calculation (simplified)
    const tithi = Math.floor(((moonLon - sunLon + 360) % 360) / 12) + 1;

    // ржиржХрзНрж╖рждрзНрж░ (Nakshatra)
    const nakIndex = Math.floor((moonLon % 360) / (360 / 27));
    const nakshatras = [
      "ржЕрж╢рзНржмрж┐ржирзА", "ржнрж░ржгрзА", "ржХрзГрждрзНрждрж┐ржХрж╛", "рж░рзЛрж╣рж┐ржгрзА", "ржорзГржЧрж╢рж┐рж░рж╛", "ржЖрж░рзНржжрзНрж░рж╛",
      "ржкрзБржирж░рзНржмрж╕рзБ", "ржкрзБрж╖рзНржпрж╛", "ржЕрж╢рзНрж▓рзЗрж╖рж╛", "ржоржШрж╛", "ржкрзВрж░рзНржмржлрж╛рж▓рзНржЧрзБржирзА", "ржЙрждрзНрждрж░ржлрж╛рж▓рзНржЧрзБржирзА",
      "рж╣рж╕рзНрждрж╛", "ржЪрж┐рждрзНрж░рж╛", "рж╕рзНржмрж╛рждрзА", "ржмрж┐рж╢рж╛ржЦрж╛", "ржЕржирзБрж░рж╛ржзрж╛", "ржЬрзНржпрзЗрж╖рзНржарж╛",
      "ржорзВрж▓рж╛", "ржкрзВрж░рзНржмрж╛рж╖рж╛ржврж╝рж╛", "ржЙрждрзНрждрж░рж╛рж╖рж╛ржврж╝рж╛", "рж╢рзНрж░ржмржгрж╛", "ржзржирж┐рж╖рзНржарж╛", "рж╢рждржнрж┐рж╖рж╛",
      "ржкрзВрж░рзНржмржнрж╛ржжрзНрж░ржкржжрж╛", "ржЙрждрзНрждрж░ржнрж╛ржжрзНрж░ржкржжрж╛", "рж░рзЗржмрждрзА"
    ];
    const nakshatra = nakshatras[nakIndex];
    const flavor = NAK_FLAVOR[nakshatra] ?? "";

    // ЁЯФо Generate Horoscope for each sign
    const horoscope = {};
    for (const sign of SIGNS) {
      const rng = seededRandom(`${isoDate}|${sign}|${city}`);
      horoscope[sign] = {
        summary: `${pick(rng, TEMPLATES.lead)} ${flavor}`.trim(),
        health: pick(rng, TEMPLATES.health),
        advice: pick(rng, TEMPLATES.advice),
        tithi: `рждрж┐ржерж┐ ${tithi}`,
        nakshatra,
      };
    }

    // ЁЯз╛ Final JSON Response
    const result = {
      date: displayDate,
      location: { city, region, country, lat, lon, timeZone: tz },
      sun_longitude: Number(sunLon.toFixed(6)),
      moon_longitude: Number(moonLon.toFixed(6)),
      tithi,
      nakshatra,
      horoscope,
      meta: {
        generatedAt: new Date().toISOString(),
        source: "astronomy-engine",
        version: "1.0.0",
      },
    };

    return new Response(JSON.stringify(result, null, 2), {
      status: 200,
      headers: {
        "Content-Type": "application/json; charset=utf-8",
        "Cache-Control": "s-maxage=900, stale-while-revalidate=3600",
      },
    });
  } catch (err) {
    console.error("Horoscope API error:", err);
    return new Response(
      JSON.stringify({ error: "Failed to generate horoscope" }),
      {
        status: 500,
        headers: { "Content-Type": "application/json" },
      }
    );
  }
}
